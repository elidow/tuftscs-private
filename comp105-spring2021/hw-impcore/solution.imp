;;;;;;;;;;;;;;;;;;; COMP 105 IMPCORE ASSIGNMENT ;;;;;;;;;;;;;;;
;;;; Eli Dow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise DD


;; (double-digit n) Given a positive integer `n` less than 20,000, double-digit 
;;                  returns `n` with the same decimal representation except that
;;                  each digit appears twice

;; laws
;;    (double-digit d) == (+ (* 10 d) d)
;;    (double-digit (+ (* 10 m) d)) == 
;;        ( ( + (+ (* 10 d) d) ) (* (double-digit m) 100))

(define double-digit (n)
    (if (< n 10)
        (+ (* 10 n) n)
        ( + (+ (* 10 (mod n 10)) (mod n 10)) (* (double-digit (/ n 10)) 100))))


        ;;unit tests
        (check-expect (double-digit 3) 33)       ;; single digit
        (check-expect (double-digit 12) 1122)    ;; two digits
        (check-expect (double-digit 523) 552233) ;; three or more digits
        (check-expect (double-digit 101) 110011) ;; zero in the middle


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise C


;; (population-count n) Given a nonnegative integer `n`, population-count
;;                      returns the number of 1 bits in the binary 
;;                      representation of `n`

;; laws
;;    (population-count 0) == 0
;;    (population-count n) == ( + (mod n 2) (population-count (/ n 2)))
;;        where n > 0

(define population-count (n)
    (if (= n 0)
        0
        ( + (mod n 2) (population-count (/ n 2)))))


        ;;unit tests
        (check-expect (population-count 0) 0)     ;; zero case
        (check-expect (population-count 1) 1)     ;; one case
        (check-expect (population-count 8) 1)     ;; starts with 1, rest are 0s
        (check-expect (population-count 31) 5)    ;; has all 1s
        (check-expect (population-count 239) 7)   ;; mix of 1s and 0s


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise 8


;; (binary n) Given an integer `n`, binary returns the binary representation 
;;            of `n`

;; laws
;;    (binary 0) == 0
;;    (binary n) == ( + (mod n 2) (* 10 (binary (/ n 2)))) where n > 0

(define binary (n)
    (if (= n 0)
        0
        (+ (mod n 2) (* 10 (binary (/ n 2))))))


        ;;unit tests
        (check-expect (binary 0) 0)         ;; zero case
        (check-expect (binary 63) 111111)   ;; positive number with only 1s
        (check-expect (binary 27) 11011)    ;; positive number mix of 1s and 0s
        (check-expect (binary -3) -11)      ;; negative number with only 1s
        (check-expect (binary -44) -101100) ;; negative number mix of 1s and 0s


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise 2


;; (sigma m n) Given integers `m` and `n` where `m` <= `n`, sigma returns 
;;             the sum of the elements of the set {i | `m` <= i <= `n`}

;; laws
;;    (sigma m m) == m where m = n
;;    (sigma m n) == ( + n (sigma m (- n 1)) ) where m < n

(define sigma (m n)
    (if (= (- n m) 0)
        m
        ( + n (sigma m (- n 1)))))


        ;;unit tests
        (check-expect (sigma 1 1) 1)      ;; m = n
        (check-expect (sigma 8 9) 17)     ;; m < n where n, m > 0
        (check-expect (sigma 40 45) 255)  ;; m < n where n, m > 0
        (check-expect (sigma -4 -1) -10)  ;; m < n where n, m < 0
        (check-expect (sigma -9 9) 0)     ;; m < n where n > 0, m < 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise 5 Part 1


;; main function

;; (prime? n) Given an integer `n`, prime? returns true (1) if `n` is prime;
;;              it returns false (0) otherwise

;; laws
;;    (prime? n) == 0 where n < 2
;;    (prime? 2) == 1
;;    (prime? n) == (has-divisor? n (/ n 2)) where n > 2

(define prime? (n)
    (if (< n 2)
        0
        (if (= n 2)
            1
            (has-divisor? n (/ n 2)))))


        ;;unit tests
        ;;Main function:
        (check-assert (not (prime? 1)))    ;; n < 2, n is positive
        (check-assert (not (prime? -5)))   ;; n < 2, n is negative
        (check-assert (prime? 2))          ;; n = 2
        (check-assert (not (prime? 44)))   ;; n > 2, not prime
        (check-assert (prime? 107))        ;; n > 2, prime


;; helper function

;; (has-divisor? n d) Given an integer `n`, has-divisor? returns true (1) if `n`
;;               has a divisor `d` where (`n` % `d` == 0) and 1 < `d` < `n`; it
;;               returns false (0) otherwise

;; laws
;;    (has-divisor? n 1) == 1
;;    (has-divisor? n d) == 0 where (= (mod n d) 0)
;;    (has-divisor? n d) == (has-divisor? n (- d 1)) where (!= (mod n d) 0)

(define has-divisor? (n d)
    (if (= d 1)
        1
        (if (= (mod n d) 0)
            0
            (has-divisor? n (- d 1)))))


        ;;unit tests
        (check-assert (has-divisor? 3 2))          ;; n is prime
        (check-assert (has-divisor? 31 30))        ;; n is prime
        (check-assert ( not (has-divisor? 27 26))) ;; n is not prime
        (check-assert ( not (has-divisor? 51 50))) ;; n is not prime

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; Exercise 5 Part 2


;; main function

;; (nthprime n) Given a positive integer `n`, nthprime returns the nth prime
;;              number, in which we consider 2 to be the first.

;; laws
;;    (nthprime 1) == 2
;;    (nthprime n) == (nthprime-after-v (- n 1) 3) where n > 1

(define nthprime (n)
    (if (= n 1)
        2
        (nthprime-after-v (- n 1) 2)))


        ;;unit tests
        (check-expect (nthprime 1) 2)   ;; first prime number
        (check-expect (nthprime 2) 3)   ;; second prime number
        (check-expect (nthprime 14) 43) ;; nth prime number where n > 10


;; helper function

;; (nthprime-after-v n v) Given positive integers `n` and `v`, nthprime-after-v
;;                        returns the nth prime number after value `v`

;; laws
;;    (nthprime-after-v 0 v) == v
;;    (nthprime-after-v n v) == (nthprime-after-v (- n 1) (+ v 1) 
;;        where n is prime
;;    (nthprime-after-v n v) == (nthprime-after-v n (+ v 1)
;;        where n is not prime

(define nthprime-after-v (n v)
    (if (= n 0)
        v
        (if (prime? (+ v 1))
            (nthprime-after-v (- n 1) (+ v 1))
            (nthprime-after-v n (+ v 1)))))


        ;;unit tests
        (check-expect (nthprime-after-v 1 2) 3)   ;; first prime number after 2
        (check-expect (nthprime-after-v 8 2) 23)  ;; 2 < n < 10
        (check-expect (nthprime-after-v 13 2) 43) ;; n > 10