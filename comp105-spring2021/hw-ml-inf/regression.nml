;; REGRESSION

;; LITERAL
(check-principal-type 'a sym)                           ;; LITERAL SYM
(check-principal-type  3 int)                           ;; LITERAL INT
(check-principal-type #f bool)                          ;; LITERAL BOOLV
(check-principal-type '() (forall ['a] (list 'a)))      ;; LITERAL EMPTY
(check-principal-type '(1 2 3 4) (list int))            ;; LITERAL LIST
(check-type-error '(1 #t))                              ;; t1 != t2

;; IFX 
(check-principal-type (if #t 2 1) int)                  ;; INT
(check-principal-type (if #t #f #t) bool)               ;; BOOLV
(check-principal-type (if #t '(a c) '(a b)) (list sym)) ;; LIST
(check-type-error (if 1 1 2))                           ;; t1 not bool
(check-type-error (if #t 1 'b))                         ;; t2 != t3

;; BEGIN
(check-principal-type (begin ) unit)                              ;; EMPTY
(check-principal-type (begin '()) (forall ['a] (list 'a)))        ;; EMPTY LIST
(check-principal-type (begin 5 #t 'university) sym)               ;; SYM
(check-principal-type (begin #t 'university 5) int)               ;; INT
(check-principal-type (begin 'university 5 '(#t #f)) (list bool)) ;; LIST
(check-type-error (begin '(1) 'a (+ a 1)))


;; LAMBDA
(check-principal-type (lambda (x) #t) (forall ['a] ('a -> bool))) ;; ALPHA
(check-principal-type (lambda (x) (+ x 1)) (int -> int))          ;; INT
(check-principal-type (lambda (x y) (cons x '(coding programming))) 
                      (forall ['a 'b] (sym 'a -> (list sym))))    ;; fn

;; LET
(check-principal-type (let [(x 1) (y 'a) (z #t)] x) int)        ;; INT
(check-principal-type (let [(x 1) (y 'a) (z #t)] y) sym)        ;; SYM
(check-principal-type (let [(x 1) (y 'a) (z '(#t #f #t))] z)    ;; LIST
                        (list bool))
(check-type-error (let [(x y) (y 2)] x))                        ;; y no type

;; LETREC
(check-principal-type (letrec                                   ;; INT
                        [(func_one (lambda (x) (+ x 1)))
                         (func_two (lambda (y) (func_two y)))] 
                        (func_one 2)) int)
(check-principal-type (letrec                                   ;; LIST
                        [(func_one (lambda (x) (cons x '())))
                         (func_two (lambda (y) (func_one y)))] 
                        (func_one 'a)) (list sym))
(check-type-error (letrec                                       ;; e not lambda
                      [(onefunc (3))
                       (twofunc (lambda (y) (1)))]
                       (twofunc 1)))                     

;; extra tests
(check-type-error (lambda (x) (cons x x)))
(check-type-error (lambda (x) (cdr (pair x x))))

(define even? (x) (= (mod x 2) 0))
(check-principal-type even? (int -> bool))
(check-principal-type (map even? '(1 2 3 4)) (list bool))       ;; MAP
(check-principal-type (filter even? '(1 2 3 4)) (list int))     ;; FILTER

(define large? (x) (> x 10))
(check-principal-type large? (int -> bool))
(check-principal-type (exists? large? '(1 2 3 4)) bool)         ;; EXISTS

(define multiply (x y) (* x y))
(check-principal-type multiply (int int -> int))                ;; MULTIPLY
(check-principal-type (foldr multiply 1 '(1 2 3 4)) int)        ;; FOLDR1
(check-principal-type (foldr cons '(0) '(1 2 3 4)) (list int))  ;; FOLDR2